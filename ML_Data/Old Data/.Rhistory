# #computes the persistent homology of the superlevel sets
# #if trying other functions, FUN       and k/h/m0 must line up
# DiagGrid <- gridDiag(X = x.grid, FUN = knnDE, k = 60, lim = cbind(Xlim, Ylim), by = 0.1,
#                      sublevel = FALSE, library = "Dionysus", location = TRUE,
#                      printProgress = FALSE)
#
# plot(DiagGrid[["diagram"]], band = 2 * band[["width"]],
#      main = "KDE Diagram")
#
#
# par(mfrow = c(1, 2), mai = c(0.8, 0.8, 0.3, 0.1))
# plot(DiagGrid[["diagram"]], rotated = TRUE, band = band[["width"]],
#      main = "Rotated Diagram")
# plot(DiagGrid[["diagram"]], barcode = TRUE, main = "Barcode")
#
# max.scale <- 3 # limit of the filtration
# max.dimension <- 1 # components and loops
# #0 for components, 1 for loops, 2 for voids, etc.
#
# DiagRips <- ripsDiag(X = total.grid, max.dimension, max.scale,
#                      library = c("GUDHI", "Dionysus"), location = TRUE, printProgress = FALSE)
#
# plot(DiagRips[["diagram"]], rotated = TRUE, band = band[["width"]],
#      main = "Rotated Diagram")
# plot(DiagRips[["diagram"]], barcode = TRUE, main = "Barcode")
#
# # persistence diagram of alpha complex
# DiagAlphaCmplx <- alphaComplexDiag(X = total.grid, library = c("GUDHI", "Dionysus"),
#                                    location = TRUE, printProgress = TRUE)
#
# # plot
# par(mfrow = c(1, 2))
# plot(DiagAlphaCmplx[["diagram"]], main = "Alpha complex persistence diagram")
# one <- which(DiagAlphaCmplx[["diagram"]][, 1] == 1)
# one <- one[which.max( + DiagAlphaCmplx[["diagram"]][one, 3] -
#                         DiagAlphaCmplx[["diagram"]][one, 2])]
# plot(total.grid, col = 1, main = "Representative loop")
# for (i in seq(along = one)) {
#   for (j in seq_len(dim(DiagAlphaCmplx[["cycleLocation"]][[one[i]]])[1])) {
#     lines(DiagAlphaCmplx[["cycleLocation"]][[one[i]]][j, , ], pch = 19, cex = 1, col = i + 1)
#   }
# }
# par(mfrow = c(1, 1))
#
# n <- 30
# x.grid <- cbind(circleUnif(n = n), runif(n = n, min = -0.1, max = 0.1))
#
# DiagAlphaShape <- alphaShapeDiag(X = total.grid, maxdimension = 1,
#                                  library = c("GUDHI", "Dionysus"),
#                                  location = TRUE, printProgress = TRUE)
#
# par(mfrow = c(1, 2))
# plot(DiagAlphaShape[["diagram"]], main = "Alpha complex persistence diagram")
# one <- which(DiagAlphaShape[["diagram"]][, 1] == 1)
# one <- one[which.max( + DiagAlphaShape[["diagram"]][one, 3] -
#                         DiagAlphaShape[["diagram"]][one, 2])]
# plot(total.grid, col = 1, main = "Representative loop")
# for (i in seq(along = one)) {
#   for (j in seq_len(dim(DiagAlphaShape[["cycleLocation"]][[one[i]]])[1])) {
#     lines(DiagAlphaShape[["cycleLocation"]][[one[i]]][j, , ], pch = 19, cex = 1, col = i + 1)
#   }
# }
#
# max.scale <- 0.4
# # limit of the filtration
# max.dimension <- 1
# # components and loops
# FltRips <- ripsFiltration(X = total.grid, maxdimension = max.dimension,
#                           maxscale = max.scale, dist = "euclidean", library = "GUDHI",
#                           printProgress = TRUE)
#
# #another alpha persistance diagram?
# DiagAlphaShape <- alphaShapeDiag(X = x.grid, printProgress = FALSE)
# plot(DiagAlphaShape[["diagram"]], main = "Persistance Diagram")
#
# #bottleneck and wasserstein distances
# Diag1 <- ripsDiag(x.grid[,1], maxdimension = 1, maxscale = 5)
# Diag2 <- ripsDiag(x.grid[,2], maxdimension = 1, maxscale = 5)
#
# print (bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],dimension = 1))
# print (wasserstein(Diag1[["diagram"]], Diag2[["diagram"]], p = 2, dimension = 1))
#
# #landscape and silhouettes
# tseq <- seq(0, maxscale, length = 1000) #domain
# Diag <- ripsDiag(X = x.grid, maxdimension, maxscale,library = "GUDHI", printProgress = FALSE)
# Land <- landscape(Diag[["diagram"]], dimension = 1, KK = 1, tseq)
# Sil <- silhouette(Diag[["diagram"]], p = 1, dimension = 1, tseq)
View(x.grid)
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(1,3,5)], stringsAsFactors = FALSE)
#x.grid <- as.numeric(unlist(x.grid))
View(x.grid)
View(unique(x.grid))
View(unique(x.grid[,2]))
View(unique(x.grid[,3]))
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
View(x.grid)
View(dist())
View(dist)
charge_data <- file.choose()
#Read in the file
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(1,3,5)], stringsAsFactors = FALSE)
#x.grid <- as.numeric(unlist(x.grid))
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
Xlim <- c(-1.5, 1.45)
Ylim <- c(-1.5, 1.45)
by <- 0.06
Xseq <- seq(from = Xlim[1], to = Xlim[2], by = by)
Yseq <- seq(from = Ylim[1], to = Ylim[2], by = by)
total.grid <- expand.grid(Xseq, Yseq)
#distance <- distFct(X = x.grid, Grid = total.grid)
distance <- dist(x.grid)
m0 <- 0.1
DTM <- dtm(X = x.grid, Grid = x.grid, m0 = m0)
#calculates nearest neighbor
k <- 60
kNN <- knnDE(X = x.grid, Grid = x.grid, k = k)
#estimates density?
h <- 0.3
KDE <- kde(X = x.grid, Grid = x.grid, h = h)
#estimates distance
h <- 0.3
Kdist <- kernelDist(X = x.grid, Grid = x.grid, h = h)
z<-matrix(DTM, ncol = length(Yseq), nrow = length(Xseq))
nbcol = 100
color = rev(rainbow(nbcol, start = 0/6, end = 4/6))
zcol  = cut(z, nbcol)
persp3d(Xseq, Yseq, z, xlim = NULL, ylim = NULL, zlim = NULL, col = color[zcol],
xlab = NULL, ylab = NULL, zlab = NULL, add = FALSE,
forceClipregion = FALSE)
length(Yseq)
nrow(DTM)
NROW(DTM)
View(x.grid)
View(dtm)
library("igraph")
charge_data <- file.choose()
#Read in the file
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(4,5)], stringsAsFactors = FALSE)
View(x.grid)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
plot(net)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = black,
vertex.label = NULL)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NULL)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NULL, edge.arrow.size = NULL)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = NA, layout = layout_with_lgl)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0, layout = layout_with_lgl)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
edge.arrow.size = 0, layout = layout_with_lgl)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
edge.arrow.size = 0, layout = layout_with_fr)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0, layout = layout_with_fr)
View(x.grid)
View(unique(x.grid[,1]))
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(3,5)], stringsAsFactors = FALSE)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0, layout = layout_with_fr)
View(unique(x.grid[,2]))
plot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
charge_data <- file.choose()
#Read in the file
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(3,5)], stringsAsFactors = FALSE)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:5000,c(3,5)], stringsAsFactors = FALSE)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:3000,c(3,5)], stringsAsFactors = FALSE)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
f4 <- function(n) {
x <- character(length(n))
for (i in 1:length(n)) {
x[i] <- n[[i]]
}
x
}
og_file <- file.choose()
bro_file <- data.frame(readLines(og_file), stringsAsFactors = FALSE, drop = FALSE)
#deletes all the headers at the top
to_delete <- c()
for (i in 1:nrow(bro_file)){
if (substring(bro_file[i,1],1,1)=="#" && substring(bro_file[i,1],1,8) != "#fields\t"){
to_delete <- append(to_delete, i)
}
}
bro_file <- bro_file[-to_delete,]
#starts creating new data frame
num.rows <- nrow(bro_file)
csv.df <- data.frame()
#splits data by whitespace and enters each term into column
for (i in 2:num.rows){
new.row <- str_split(bro_file[i,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
new.df <- t(data.frame(x, stringsAsFactors=FALSE))
csv.df <- rbind(csv.df, new.df)
}
#creates column rows from #fields row in bro file
bro_file[1,1] <- toString(gsub("#fields\t", "", bro_file[1,1]))
new.row <- str_split(bro_file[1,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
colnames(csv.df) <- as.character(x)
{n <- readline(prompt="Enter file name to save: ")
n <- paste(n, ".csv", sep="")
write.csv(csv.df, n, row.names = FALSE)}
library("stringr")
library("stringr")
setwd("/Volumes/HANNAH/TDA/Threat Hunt")
og_file <- file.choose()
bro_file <- data.frame(readLines(og_file), stringsAsFactors = FALSE, drop = FALSE)
#deletes all the headers at the top
to_delete <- c()
for (i in 1:nrow(bro_file)){
if (substring(bro_file[i,1],1,1)=="#" && substring(bro_file[i,1],1,8) != "#fields\t"){
to_delete <- append(to_delete, i)
}
}
bro_file <- bro_file[-to_delete,]
#starts creating new data frame
num.rows <- nrow(bro_file)
csv.df <- data.frame()
#splits data by whitespace and enters each term into column
for (i in 2:num.rows){
new.row <- str_split(bro_file[i,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
new.df <- t(data.frame(x, stringsAsFactors=FALSE))
csv.df <- rbind(csv.df, new.df)
}
#creates column rows from #fields row in bro file
bro_file[1,1] <- toString(gsub("#fields\t", "", bro_file[1,1]))
new.row <- str_split(bro_file[1,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
colnames(csv.df) <- as.character(x)
{n <- readline(prompt="Enter file name to save: ")
n <- paste(n, ".csv", sep="")
write.csv(csv.df, n, row.names = FALSE)}
#convert into list
f4 <- function(n) {
x <- character(length(n))
for (i in 1:length(n)) {
x[i] <- n[[i]]
}
x
}
bro_file <- data.frame(readLines(og_file), stringsAsFactors = FALSE, drop = FALSE)
#deletes all the headers at the top
to_delete <- c()
for (i in 1:nrow(bro_file)){
if (substring(bro_file[i,1],1,1)=="#" && substring(bro_file[i,1],1,8) != "#fields\t"){
to_delete <- append(to_delete, i)
}
}
bro_file <- bro_file[-to_delete,]
#starts creating new data frame
num.rows <- nrow(bro_file)
csv.df <- data.frame()
#splits data by whitespace and enters each term into column
for (i in 2:num.rows){
new.row <- str_split(bro_file[i,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
new.df <- t(data.frame(x, stringsAsFactors=FALSE))
csv.df <- rbind(csv.df, new.df)
}
#creates column rows from #fields row in bro file
bro_file[1,1] <- toString(gsub("#fields\t", "", bro_file[1,1]))
new.row <- str_split(bro_file[1,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
colnames(csv.df) <- as.character(x)
{n <- readline(prompt="Enter file name to save: ")
n <- paste(n, ".csv", sep="")
write.csv(csv.df, n, row.names = FALSE)}
setwd("/Volumes/HANNAH/TDA/Threat Hunt")
og_file <- file.choose()
bro_file <- data.frame(readLines(og_file), stringsAsFactors = FALSE, drop = FALSE)
#deletes all the headers at the top
to_delete <- c()
for (i in 1:nrow(bro_file)){
if (substring(bro_file[i,1],1,1)=="#" && substring(bro_file[i,1],1,8) != "#fields\t"){
to_delete <- append(to_delete, i)
}
}
bro_file <- bro_file[-to_delete,]
#starts creating new data frame
num.rows <- nrow(bro_file)
csv.df <- data.frame()
#splits data by whitespace and enters each term into column
for (i in 2:num.rows){
new.row <- str_split(bro_file[i,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
new.df <- t(data.frame(x, stringsAsFactors=FALSE))
csv.df <- rbind(csv.df, new.df)
}
#creates column rows from #fields row in bro file
bro_file[1,1] <- toString(gsub("#fields\t", "", bro_file[1,1]))
new.row <- str_split(bro_file[1,1], "\t")
new.row <- as.character(unlist(new.row, use.names=FALSE))
x <- f4(new.row)
colnames(csv.df) <- as.character(x)
{n <- readline(prompt="Enter file name to save: ")
n <- paste(n, ".csv", sep="")
write.csv(csv.df, n, row.names = FALSE)}
charge_data <- file.choose()
#Read in the file
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:3000,c(3,5)], stringsAsFactors = FALSE)
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(2,4)], stringsAsFactors = FALSE)
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
net <- graph_from_data_frame(x.grid)
tkplot(net, vertex.color = "powderblue", vertex.size = 8, edge.color = "black",
vertex.label = NA, edge.arrow.size = 0.2, layout = layout_with_fr)
View(unique(x.grid[,1]))
View(unique(x.grid[,2]))
library("TDA")
library("rgl")
charge_data <- file.choose()
#Read in the file
inputted.file <- data.frame(read.csv(charge_data), header = TRUE)
x.grid <- data.frame(inputted.file[2:nrow(inputted.file),c(1,3,5)], stringsAsFactors = FALSE)
#x.grid <- as.numeric(unlist(x.grid))
#Creates categorical variables for nonnumerical columns
for (i in 1:ncol(x.grid)){
if (is.factor(x.grid[,i])){
this.data <- x.grid[,i]
this.data.f <- factor(this.data, levels = as.character(unique(this.data)),
labels=c(1:length(unique(this.data))))
this.data.f <- as.numeric(this.data.f)
x.grid[,i] <- this.data.f
}
}
??KNN
??knnDE()
Xlim <- c(-1.5, 1.45)
Ylim <- c(-1.5, 1.45)
Zlim <- c(-1.5, 1.45)
by <- 0.06
Xseq <- seq(from = Xlim[1], to = Xlim[2], by = by)
Yseq <- seq(from = Ylim[1], to = Ylim[2], by = by)
Zseq <- seq(from = Zlim[1], to = Zlim[2], by = by)
total.grid <- expand.grid(Xseq, Yseq, Zseq)
X1<-x.grid[,1]
X2<-x.grid[,2]
commonTheme=list(labs(color="Density",fill="Density",
x="x",
y="y"),
theme_bw(),
theme(legend.position=c(0,1),
legend.justification=c(0,1)))
X1<-x.grid[,1]
X2<-x.grid[,c(2,3)]
distance <- dist(x.grid)
#DTM (distance to measure) is measured by this complicated math formula
#calculate DTM for every point in Grid:
m0 <- 0.1
DTM <- dtm(X = x.grid, Grid = x.grid, m0 = m0)
#calculates nearest neighbor
k <- 60
kNN <- knnDE(X = x.grid, Grid = x.grid, k = k)
#estimates density?
h <- 0.3
KDE <- kde(X = x.grid, Grid = x.grid, h = h)
#estimates distance
h <- 0.3
Kdist <- kernelDist(X = x.grid, Grid = x.grid, h = h)
z<-matrix(DTM, ncol = length(Yseq), nrow = length(Xseq))
nbcol = 100
color = rev(rainbow(nbcol, start = 0/6, end = 4/6))
zcol  = cut(z, nbcol)
persp3d(Xseq, Yseq, z, xlim = NULL, ylim = NULL, zlim = NULL, col = color[zcol],
xlab = NULL, ylab = NULL, zlab = NULL, add = FALSE,
forceClipregion = FALSE)
tree <- clusterTree(x.grid, k, density = "knn")
tree.KDE <- clusterTree(x.grid, k, h = 0.3, density = "kde")
plot(tree, type = "lambda", color = NULL, add = FALSE, main = "knn lambda tree")
plot(tree.KDE, type = "lambda", main = "lambda Tree (kde)")
plot(x.grid, pch = 19, cex = 0.6, main = "cluster labels")
for (i in tree[["id"]]){
points(matrix(x.grid[tree[["DataPoints"]][[i]]], ncol = 2), col = i, pch = 19,
cex = 0.6)
}
band <- bootstrapBand(X = x.grid, FUN = knnDE, Grid = total.grid, B = 100,
parallel = FALSE, alpha = 0.1, k = k)
library(ggplot2)
library(MASS)
library(gridExtra)
install.packages(pkgs = "FNN")
install.packages(pkgs = "igraph")
install.packages(pkgs = "scales")
library("FNN")
library("igraph")
install.packages(pkgs = "scales")
##########################################################################
# uniform sample on the circle, and grid of points
##########################################################################
setwd("C:/Users/kimh2/Desktop/Wildfire-NN-ML/ML_Data/Old Data")
#/Users/hk/Desktop/School/MRHS/11th\ Grade/R/NN-ML/Wildfire-NN-ML/ML_Data/Old\ Data/
X1 <- read.csv("merra2_active_calfire_jja.csv")[,c(2,8)]
Y1 <- read.csv("merra2_inactive_calfire_jja.csv")[,c(2,8)]
